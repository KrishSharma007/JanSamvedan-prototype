// Datasource
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Generator
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

// Enums
enum UserRole {
  CITIZEN
  ADMIN
  NGO
}

enum ComplaintStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  RESOLVED
  REJECTED
}

// Models
model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  phone        String?
  address      String?
  role         UserRole @default(CITIZEN)

  // Role-specific fields
  department   String? // For ADMIN users
  organization String? // For NGO users
  serviceArea  String? // For NGO users

  complaints  Complaint[]
  helpingWith ComplaintHelper[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Complaint {
  id           String            @id @default(cuid())
  complaintId  String            @unique // human-readable identifier like CR2024XXXX
  title        String
  description  String
  category     String
  priority     String
  status       ComplaintStatus   @default(PENDING)
  latitude     Float?
  longitude    Float?
  address      String?
  imageUrl     String?
  reportedBy   User              @relation(fields: [reportedById], references: [id])
  reportedById String
  assignedDept String?
  helpers      ComplaintHelper[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@index([status])
  @@index([category])
  @@index([reportedById])
}

// Track which NGOs/Volunteers are helping with which complaints
model ComplaintHelper {
  id          String   @id @default(cuid())
  complaintId String
  userId      String // Reference to User table
  status      String   @default("HELPING") // HELPING, CONTACTED, DECLINED
  message     String? // Optional message from NGO
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  complaint Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([complaintId, userId]) // Prevent duplicate helpers
  @@index([complaintId])
  @@index([userId])
}
